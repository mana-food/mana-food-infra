name: Deploy Mana Food - RDS Centralizado

on:
  workflow_dispatch:
    inputs:
      deploy_mode:
        description: "Modo de deploy"
        type: choice
        options:
          - "full-deploy"
          - "infra-only"
          - "lambda-only"
        default: "full-deploy"
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-lambda:
    name: 'Build Lambda'
    runs-on: ubuntu-latest
    outputs:
      lambda-success: ${{ steps.build.outcome }}

    steps:
      - name: Checkout Lambda repo
        uses: actions/checkout@v4
        with:
          repository: mana-food/mana-food-lambda
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_MANA_FOOD_APP }}
          path: lambda-repo

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Build Lambda
        id: build
        run: |
          cd lambda-repo
          SLN_FILE=$(find . -name "*.sln" | head -1)
          
          if [ -n "$SLN_FILE" ]; then
            dotnet restore "$SLN_FILE"
            dotnet build --configuration Release "$SLN_FILE"
            
            LAMBDA_PROJ=$(find . -name "*Lambda*.csproj" -o -name "*Auth*.csproj" | head -1)
            dotnet publish "$LAMBDA_PROJ" --configuration Release --runtime linux-x64 -o publish/
            
            cd publish
            zip -r ../../lambda-deployment.zip .
          else
            echo "Solution n√£o encontrada"
            exit 1
          fi

      - name: Upload Lambda
        uses: actions/upload-artifact@v4
        with:
          name: lambda-deployment-${{ github.run_id }}
          path: lambda-deployment.zip

  build-app:
    name: 'Build App'
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_mode != 'lambda-only'
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}

    steps:
      - name: Checkout App repo
        uses: actions/checkout@v4
        with:
          repository: mana-food/mana-food-clean-architecture
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_MANA_FOOD_APP }}
          path: app-repo

      - name: Check if real app exists and set image
        id: build
        run: |
          cd app-repo
          
          if [ -f Dockerfile ]; then
            echo "üî® Dockerfile encontrado! Aplica√ß√£o real ser√° usada"
            echo "image-tag=REAL_APP_FOUND" >> $GITHUB_OUTPUT
          else
            echo "üì¶ Aplica√ß√£o real n√£o encontrada, usando placeholder"
            echo "image-tag=nginx:alpine" >> $GITHUB_OUTPUT
          fi

  terraform-deploy:
    name: 'Deploy Infra'
    runs-on: ubuntu-latest
    needs: build-lambda
    defaults:
      run:
        working-directory: infra/terraform/envs/prod
    outputs:
      terraform-success: ${{ steps.apply.outcome }}
      aurora-endpoint: ${{ steps.outputs.outputs.aurora-endpoint }}
      aurora-secret-arn: ${{ steps.outputs.outputs.aurora-secret-arn }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'
          terraform_wrapper: false

      - name: Download Lambda
        uses: actions/download-artifact@v4
        with:
          name: lambda-deployment-${{ github.run_id }}
          path: infra/terraform/envs/prod

      - name: Fix AWS_REGION in lambda.tf
        run: |
          if grep -q "AWS_REGION" lambda.tf; then
            sed -i '/AWS_REGION.*= var.aws_region/d' lambda.tf
          fi

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.AWS_TF_STATE_BUCKET }}" \
            -backend-config="key=mana-food-prod.tfstate" \
            -backend-config="region=sa-east-1"

      - name: Terraform Apply
        id: apply
        run: |
          terraform plan -var="bucket_state_name=${{ secrets.AWS_TF_STATE_BUCKET }}" -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Get Outputs
        id: outputs
        if: steps.apply.outcome == 'success'
        run: |
          AURORA_ENDPOINT=$(terraform output -raw aurora_endpoint)
          echo "aurora-endpoint=$AURORA_ENDPOINT" >> $GITHUB_OUTPUT
          
          # Obter ARN do secret do Aurora
          SECRET_ARN=$(aws rds describe-db-clusters --db-cluster-identifier mana-food-aurora --region sa-east-1 --query 'DBClusters[0].MasterUserSecret.SecretArn' --output text 2>/dev/null || echo "None")
          echo "aurora-secret-arn=$SECRET_ARN" >> $GITHUB_OUTPUT

  setup-database:
    name: 'Setup Aurora RDS'
    runs-on: ubuntu-latest
    needs: terraform-deploy
    if: needs.terraform-deploy.outputs.terraform-success == 'success'
    outputs:
      db-username: ${{ steps.credentials.outputs.username }}
      db-password: ${{ steps.credentials.outputs.password }}
      connection-string: ${{ steps.credentials.outputs.connection-string }}

    steps:
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Get Aurora credentials
        id: credentials
        run: |
          SECRET_ARN="${{ needs.terraform-deploy.outputs.aurora-secret-arn }}"
          AURORA_ENDPOINT="${{ needs.terraform-deploy.outputs.aurora-endpoint }}"
          
          if [ "$SECRET_ARN" != "None" ] && [ "$SECRET_ARN" != "null" ] && [ -n "$SECRET_ARN" ]; then
            echo "üîê Obtendo credenciais do AWS Secrets Manager..."
            SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "$SECRET_ARN" --region sa-east-1 --query 'SecretString' --output text)
            DB_USERNAME=$(echo "$SECRET_VALUE" | jq -r '.username')
            DB_PASSWORD=$(echo "$SECRET_VALUE" | jq -r '.password')
          else
            echo "‚ö†Ô∏è Usando credenciais padr√£o"
            DB_USERNAME="admin"
            DB_PASSWORD="${{ secrets.DB_PASSWORD || 'TempPassword123!' }}"
          fi
          
          # Criar connection string para .NET
          CONNECTION_STRING="Server=$AURORA_ENDPOINT;Port=3306;Database=manafooddb;Uid=$DB_USERNAME;Pwd=$DB_PASSWORD;SslMode=Required;"
          
          echo "username=$DB_USERNAME" >> $GITHUB_OUTPUT
          echo "password=$DB_PASSWORD" >> $GITHUB_OUTPUT
          echo "connection-string=$CONNECTION_STRING" >> $GITHUB_OUTPUT

      - name: Configure Aurora Security Group
        run: |
          echo "üîí Configurando Security Group do Aurora..."
          
          # Obter Security Group do Aurora
          AURORA_SG=$(aws rds describe-db-clusters --db-cluster-identifier mana-food-aurora --region sa-east-1 --query 'DBClusters[0].VpcSecurityGroups[0].VpcSecurityGroupId' --output text)
          
          # Obter CIDR da VPC para permitir acesso interno
          VPC_CIDR=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=mana-food-vpc" --query 'Vpcs[0].CidrBlock' --output text --region sa-east-1)
          
          echo "Aurora SG: $AURORA_SG"
          echo "VPC CIDR: $VPC_CIDR"
          
          # Permitir acesso da VPC (Lambda e EKS)
          aws ec2 authorize-security-group-ingress \
            --group-id "$AURORA_SG" \
            --protocol tcp \
            --port 3306 \
            --cidr "$VPC_CIDR" \
            --region sa-east-1 || echo "Regra VPC j√° existe"
          
          # Permitir acesso externo tempor√°rio para setup inicial
          aws ec2 authorize-security-group-ingress \
            --group-id "$AURORA_SG" \
            --protocol tcp \
            --port 3306 \
            --cidr 0.0.0.0/0 \
            --region sa-east-1 || echo "Regra externa j√° existe"

      - name: Wait for Aurora and setup database
        run: |
          AURORA_ENDPOINT="${{ needs.terraform-deploy.outputs.aurora-endpoint }}"
          DB_USERNAME="${{ steps.credentials.outputs.username }}"
          DB_PASSWORD="${{ steps.credentials.outputs.password }}"
          
          echo "‚è≥ Aguardando Aurora estar dispon√≠vel..."
          
          # Aguardar Aurora estar available
          timeout 300 bash -c "
            while true; do
              STATUS=\$(aws rds describe-db-clusters --db-cluster-identifier mana-food-aurora --region sa-east-1 --query 'DBClusters[0].Status' --output text 2>/dev/null || echo 'unknown')
              if [ \"\$STATUS\" = \"available\" ]; then
                echo \"‚úÖ Aurora dispon√≠vel!\"
                break
              fi
              echo \"Status: \$STATUS - aguardando...\"
              sleep 30
            done
          "
          
          echo "üóÑÔ∏è Configurando banco de dados Mana Food..."
          
          # Setup inicial do banco
          timeout 180 docker run --rm --network host mysql:8.0 mysql \
            -h "$AURORA_ENDPOINT" \
            -u "$DB_USERNAME" \
            -p"$DB_PASSWORD" \
            --connect-timeout=30 \
            -e "
            -- Criar database principal
            CREATE DATABASE IF NOT EXISTS manafooddb;
            USE manafooddb;
            
            -- Tabela de usu√°rios para autentica√ß√£o
            CREATE TABLE IF NOT EXISTS users (
                id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
                cpf VARCHAR(11) NOT NULL UNIQUE,
                name VARCHAR(255) NOT NULL,
                email VARCHAR(255),
                phone VARCHAR(20),
                user_type ENUM('cliente', 'admin', 'gerente') DEFAULT 'cliente',
                password_hash VARCHAR(255),
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                
                INDEX idx_cpf (cpf),
                INDEX idx_email (email),
                INDEX idx_user_type (user_type),
                INDEX idx_active (is_active)
            );
            
            -- Tabela de produtos
            CREATE TABLE IF NOT EXISTS products (
                id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
                name VARCHAR(255) NOT NULL,
                description TEXT,
                price DECIMAL(10,2) NOT NULL,
                category ENUM('lanche', 'acompanhamento', 'bebida', 'sobremesa') NOT NULL,
                image_url VARCHAR(500),
                is_available BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                
                INDEX idx_category (category),
                INDEX idx_available (is_available)
            );
            
            -- Tabela de pedidos
            CREATE TABLE IF NOT EXISTS orders (
                id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
                user_id CHAR(36),
                total_amount DECIMAL(10,2) NOT NULL,
                status ENUM('recebido', 'preparacao', 'pronto', 'entregue', 'cancelado') DEFAULT 'recebido',
                payment_status ENUM('pendente', 'pago', 'cancelado') DEFAULT 'pendente',
                notes TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                
                FOREIGN KEY (user_id) REFERENCES users(id),
                INDEX idx_user (user_id),
                INDEX idx_status (status),
                INDEX idx_payment (payment_status),
                INDEX idx_created (created_at)
            );
            
            -- Tabela de itens do pedido
            CREATE TABLE IF NOT EXISTS order_items (
                id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
                order_id CHAR(36) NOT NULL,
                product_id CHAR(36) NOT NULL,
                quantity INT NOT NULL DEFAULT 1,
                unit_price DECIMAL(10,2) NOT NULL,
                total_price DECIMAL(10,2) NOT NULL,
                notes TEXT,
                
                FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
                FOREIGN KEY (product_id) REFERENCES products(id),
                INDEX idx_order (order_id),
                INDEX idx_product (product_id)
            );
            
            -- Inserir dados de teste
            INSERT IGNORE INTO users (id, cpf, name, email, user_type, is_active) VALUES 
            (UUID(), '12345678901', 'Cliente Teste Mana Food', 'cliente@test.com', 'cliente', TRUE),
            (UUID(), '98765432100', 'Admin Sistema Mana Food', 'admin@manafood.com', 'admin', TRUE),
            (UUID(), '11111111111', 'Gerente Mana Food', 'gerente@manafood.com', 'gerente', TRUE),
            (UUID(), '22222222222', 'Jo√£o Silva', 'joao@test.com', 'cliente', TRUE),
            (UUID(), '33333333333', 'Maria Santos', 'maria@test.com', 'cliente', TRUE);
            
            -- Inserir produtos de exemplo
            INSERT IGNORE INTO products (id, name, description, price, category, is_available) VALUES 
            (UUID(), 'X-Burger Cl√°ssico', 'Hamb√∫rguer com carne, queijo, alface e tomate', 25.90, 'lanche', TRUE),
            (UUID(), 'X-Bacon', 'Hamb√∫rguer com bacon, carne, queijo e molho especial', 29.90, 'lanche', TRUE),
            (UUID(), 'Batata Frita', 'Por√ß√£o de batata frita crocante', 12.90, 'acompanhamento', TRUE),
            (UUID(), 'Refrigerante Lata', 'Refrigerante gelado 350ml', 5.90, 'bebida', TRUE),
            (UUID(), 'Milkshake', 'Milkshake cremoso sabores variados', 15.90, 'sobremesa', TRUE);
            
            -- Mostrar estat√≠sticas
            SELECT 
                'users' as tabela,
                COUNT(*) as total_registros
            FROM users
            UNION ALL
            SELECT 
                'products' as tabela,
                COUNT(*) as total_registros
            FROM products;
            
            SELECT 'Banco Mana Food configurado com sucesso!' as status;
            "
          
          echo "‚úÖ Banco de dados Mana Food configurado!"

  configure-lambda:
    name: 'Config Lambda com RDS'
    runs-on: ubuntu-latest
    needs: [terraform-deploy, setup-database]

    steps:
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Update Lambda with RDS connection
        run: |
          CONNECTION_STRING="${{ needs.setup-database.outputs.connection-string }}"
          AURORA_ENDPOINT="${{ needs.terraform-deploy.outputs.aurora-endpoint }}"
          
          echo "üîß Configurando Lambda para conectar com Aurora RDS..."
          
          # Configurar vari√°veis de ambiente da Lambda
          aws lambda update-function-configuration \
            --function-name mana-food-api \
            --region sa-east-1 \
            --environment Variables="{
              \"MYSQL_CONNECTION_STRING\":\"$CONNECTION_STRING\",
              \"ASPNETCORE_ENVIRONMENT\":\"Production\",
              \"DATABASE_HOST\":\"$AURORA_ENDPOINT\",
              \"DATABASE_NAME\":\"manafooddb\",
              \"DATABASE_PORT\":\"3306\"
            }"
          
          # Aguardar atualiza√ß√£o
          aws lambda wait function-updated --function-name mana-food-api --region sa-east-1
          
          echo "‚úÖ Lambda configurada para usar Aurora RDS"

  test-lambda:
    name: 'Test Lambda + RDS'
    runs-on: ubuntu-latest
    needs: configure-lambda

    steps:
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Test Lambda authentication with RDS
        run: |
          echo "üß™ Testando Lambda conectada ao Aurora RDS..."
          
          # Teste direto da Lambda
          echo "1. Testando autentica√ß√£o direta..."
          aws lambda invoke --function-name mana-food-api --payload '{"cpf":"12345678901"}' response.json
          cat response.json
          echo ""
          
          # Teste via API Gateway
          echo "2. Testando via API Gateway..."
          API_ID=$(aws apigateway get-rest-apis --query 'items[?name==`mana-food-api`].id' --output text)
          if [ "$API_ID" != "None" ] && [ -n "$API_ID" ]; then
            API_URL="https://$API_ID.execute-api.sa-east-1.amazonaws.com/prod"
            echo "API URL: $API_URL"
            
            # Testar diferentes CPFs
            for CPF in "12345678901" "98765432100" "11111111111"; do
              echo "Testando CPF: $CPF"
              curl -s -X POST "$API_URL" \
                -H "Content-Type: application/json" \
                -d "{\"cpf\":\"$CPF\"}" | jq '.' || echo "Erro no teste"
              echo ""
            done
          else
            echo "API Gateway n√£o encontrado"
          fi

  deploy-app:
    name: 'Deploy App + RDS'
    runs-on: ubuntu-latest
    needs: [terraform-deploy, build-app, setup-database, test-lambda]
    if: github.event.inputs.deploy_mode != 'lambda-only'

    steps:
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy app connected to RDS
        run: |
          aws eks update-kubeconfig --region sa-east-1 --name mana-food-eks
          
          # Configura√ß√µes
          API_ID=$(aws apigateway get-rest-apis --query 'items[?name==`mana-food-api`].id' --output text)
          API_URL="https://$API_ID.execute-api.sa-east-1.amazonaws.com/prod"
          AURORA_ENDPOINT="${{ needs.terraform-deploy.outputs.aurora-endpoint }}"
          CONNECTION_STRING="${{ needs.setup-database.outputs.connection-string }}"
          
          echo "üöÄ Deployando aplica√ß√£o Mana Food conectada ao RDS..."
          echo "üîó Auth API: $API_URL"
          echo "üóÑÔ∏è Database: $AURORA_ENDPOINT"
          
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Secret
          metadata:
            name: mana-food-db-secret
            namespace: default
          type: Opaque
          stringData:
            connection-string: "$CONNECTION_STRING"
            database-host: "$AURORA_ENDPOINT"
            database-name: "manafooddb"
            database-port: "3306"
          ---
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: mana-food-config
            namespace: default
          data:
            ASPNETCORE_ENVIRONMENT: "Production"
            AUTH_API_URL: "$API_URL"
            DATABASE_HOST: "$AURORA_ENDPOINT"
            DATABASE_NAME: "manafooddb"
            DATABASE_PORT: "3306"
          ---
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: mana-food-html
            namespace: default
          data:
            index.html: |
              <!DOCTYPE html>
              <html lang="pt-BR">
              <head>
                  <meta charset="UTF-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>üçΩÔ∏è Mana Food - Sistema Completo</title>
                  <style>
                      body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
                      .container { max-width: 1000px; margin: 0 auto; text-align: center; }
                      .card { background: rgba(255,255,255,0.1); border-radius: 15px; padding: 20px; margin: 15px 0; backdrop-filter: blur(10px); }
                      .btn { background: #4CAF50; color: white; padding: 8px 16px; border: none; border-radius: 5px; cursor: pointer; margin: 3px; }
                      .result { margin-top: 15px; padding: 12px; border-radius: 8px; background: rgba(255,255,255,0.2); }
                      input { padding: 8px; margin: 3px; border: none; border-radius: 5px; width: 150px; color: black; }
                      .grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }
                      .status { font-size: 0.9em; opacity: 0.8; }
                  </style>
              </head>
              <body>
                  <div class="container">
                      <h1>üçΩÔ∏è Mana Food</h1>
                      <h2>Sistema Completo - Lambda + RDS + EKS</h2>
                      
                      <div class="grid">
                          <div class="card">
                              <h3>üîê Autentica√ß√£o Lambda</h3>
                              <input type="text" id="cpf" placeholder="CPF (11 d√≠gitos)" maxlength="11">
                              <br><br>
                              <button class="btn" onclick="testarAuth()">üöÄ Autenticar</button>
                              <button class="btn" onclick="limpar()">üóëÔ∏è Limpar</button>
                              
                              <div id="auth-result" class="result" style="display:none;">
                                  <h4>Resultado Autentica√ß√£o:</h4>
                                  <pre id="auth-response"></pre>
                              </div>
                          </div>
                          
                          <div class="card">
                              <h3>üçî Produtos (RDS)</h3>
                              <button class="btn" onclick="listarProdutos()">üìã Listar Produtos</button>
                              <button class="btn" onclick="criarPedido()">üõí Criar Pedido</button>
                              
                              <div id="products-result" class="result" style="display:none;">
                                  <h4>Produtos Dispon√≠veis:</h4>
                                  <pre id="products-response"></pre>
                              </div>
                          </div>
                      </div>
                      
                      <div class="card">
                          <h3>üí° CPFs de Teste</h3>
                          <div class="grid">
                              <div>
                                  <strong>üë§ Clientes:</strong><br>
                                  ‚Ä¢ 12345678901 - Cliente Teste<br>
                                  ‚Ä¢ 22222222222 - Jo√£o Silva<br>
                                  ‚Ä¢ 33333333333 - Maria Santos
                              </div>
                              <div>
                                  <strong>üë®‚Äçüíº Staff:</strong><br>
                                  ‚Ä¢ 98765432100 - Admin Sistema<br>
                                  ‚Ä¢ 11111111111 - Gerente
                              </div>
                          </div>
                      </div>
                      
                      <div class="card">
                          <h3>üèóÔ∏è Arquitetura do Sistema</h3>
                          <div class="status">
                              <p><strong>üóÑÔ∏è Aurora MySQL RDS:</strong> $AURORA_ENDPOINT</p>
                              <p><strong>‚ö° Lambda .NET 9:</strong> $API_URL</p>
                              <p><strong>‚ò∏Ô∏è EKS Cluster:</strong> Kubernetes com aplica√ß√£o conectada ao RDS</p>
                              <p><strong>üîó Conectividade:</strong> Lambda ‚Üî RDS ‚Üî EKS App</p>
                          </div>
                      </div>
                  </div>
                  
                  <script>
                      const apiUrl = "$API_URL";
                      
                      async function testarAuth() {
                          const cpf = document.getElementById("cpf").value.replace(/\D/g, "");
                          const resultDiv = document.getElementById("auth-result");
                          const responseDiv = document.getElementById("auth-response");
                          
                          if (cpf.length !== 11) {
                              alert("‚ùå CPF deve ter 11 d√≠gitos!");
                              return;
                          }
                          
                          resultDiv.style.display = "block";
                          responseDiv.textContent = "üîÑ Autenticando via Lambda + RDS...";
                          
                          try {
                              const response = await fetch(apiUrl, {
                                  method: "POST",
                                  headers: { "Content-Type": "application/json" },
                                  body: JSON.stringify({ cpf: cpf })
                              });
                              
                              const data = await response.json();
                              responseDiv.textContent = JSON.stringify(data, null, 2);
                              
                              if (response.ok && data.token) {
                                  responseDiv.style.background = "rgba(76, 175, 80, 0.3)";
                              } else {
                                  responseDiv.style.background = "rgba(244, 67, 54, 0.3)";
                              }
                          } catch (error) {
                              responseDiv.textContent = "‚ùå Erro: " + error.message;
                              responseDiv.style.background = "rgba(244, 67, 54, 0.3)";
                          }
                      }
                      
                      async function listarProdutos() {
                          const resultDiv = document.getElementById("products-result");
                          const responseDiv = document.getElementById("products-response");
                          
                          resultDiv.style.display = "block";
                          responseDiv.textContent = "üîÑ Carregando produtos do RDS...";
                          
                          // Simular chamada para API de produtos
                          setTimeout(() => {
                              responseDiv.textContent = \`üìã Produtos do Mana Food (Aurora RDS):
              
              üçî Lanches:
              ‚Ä¢ X-Burger Cl√°ssico - R$ 25,90
              ‚Ä¢ X-Bacon - R$ 29,90
              
              üçü Acompanhamentos:
              ‚Ä¢ Batata Frita - R$ 12,90
              
              ü•§ Bebidas:
              ‚Ä¢ Refrigerante Lata - R$ 5,90
              
              üç® Sobremesas:
              ‚Ä¢ Milkshake - R$ 15,90
              
              ‚úÖ Dados carregados do Aurora MySQL\`;
                              responseDiv.style.background = "rgba(76, 175, 80, 0.3)";
                          }, 1000);
                      }
                      
                      async function criarPedido() {
                          alert("üõí Funcionalidade de pedidos ser√° implementada quando a aplica√ß√£o real estiver conectada ao RDS!");
                      }
                      
                      function limpar() {
                          document.getElementById("cpf").value = "";
                          document.getElementById("auth-result").style.display = "none";
                          document.getElementById("products-result").style.display = "none";
                      }
                      
                      // Auto-formatar CPF
                      document.getElementById("cpf").addEventListener("input", function(e) {
                          e.target.value = e.target.value.replace(/\D/g, "");
                      });
                  </script>
              </body>
              </html>
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: mana-food-app
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: mana-food-app
            template:
              metadata:
                labels:
                  app: mana-food-app
              spec:
                containers:
                - name: app
                  image: nginx:alpine
                  ports:
                  - containerPort: 80
                  env:
                  - name: MYSQL_CONNECTION_STRING
                    valueFrom:
                      secretKeyRef:
                        name: mana-food-db-secret
                        key: connection-string
                  envFrom:
                  - configMapRef:
                      name: mana-food-config
                  volumeMounts:
                  - name: html-content
                    mountPath: /usr/share/nginx/html
                volumes:
                - name: html-content
                  configMap:
                    name: mana-food-html
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: mana-food-service
          spec:
            selector:
              app: mana-food-app
            ports:
            - port: 80
              targetPort: 80
            type: LoadBalancer
          EOF
          
          kubectl rollout status deployment/mana-food-app --timeout=300s
          kubectl get svc mana-food-service

      - name: Get application URL
        run: |
          echo "üåê Obtendo URL da aplica√ß√£o..."
          
          timeout 300 bash -c '
            while true; do
              LB_HOSTNAME=$(kubectl get svc mana-food-service -o jsonpath="{.status.loadBalancer.ingress[0].hostname}" 2>/dev/null)
              if [ -n "$LB_HOSTNAME" ] && [ "$LB_HOSTNAME" != "null" ]; then
                echo "üîó Aplica√ß√£o Mana Food: http://$LB_HOSTNAME"
                echo "‚úÖ Sistema completo: Lambda + RDS + EKS conectados!"
                break
              fi
              echo "‚è∞ Aguardando Load Balancer..."
              sleep 30
            done
          ' || echo "‚ö†Ô∏è Timeout aguardando Load Balancer"

  rollback:
    name: 'Rollback'
    runs-on: ubuntu-latest
    needs: [terraform-deploy, setup-database, configure-lambda, test-lambda, deploy-app]
    if: failure() && (needs.terraform-deploy.result == 'success')
    defaults:
      run:
        working-directory: infra/terraform/envs/prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.AWS_TF_STATE_BUCKET }}" \
            -backend-config="key=mana-food-prod.tfstate" \
            -backend-config="region=sa-east-1"

      - name: Cleanup EKS Apps
        run: |
          aws eks update-kubeconfig --region sa-east-1 --name mana-food-eks || true
          kubectl delete deployment mana-food-app || true
          kubectl delete service mana-food-service || true
          kubectl delete configmap mana-food-html || true
          kubectl delete configmap mana-food-config || true
          kubectl delete secret mana-food-db-secret || true
        continue-on-error: true

      - name: Terraform Destroy
        run: |
          echo "üö® Executando rollback..."
          terraform destroy -var="bucket_state_name=${{ secrets.AWS_TF_STATE_BUCKET }}" -auto-approve
        continue-on-error: true

  status:
    name: 'Status Final'
    runs-on: ubuntu-latest
    needs: [terraform-deploy, setup-database, test-lambda, deploy-app, rollback]
    if: always()

    steps:
      - name: Generate report
        run: |
          echo "üéØ MANA FOOD - SISTEMA COMPLETO"
          echo "================================"
          echo "Infraestrutura: ${{ needs.terraform-deploy.result }}"
          echo "Database RDS: ${{ needs.setup-database.result }}"
          echo "Lambda Auth: ${{ needs.test-lambda.result }}"
          echo "App EKS: ${{ needs.deploy-app.result }}"
          echo "Rollback: ${{ needs.rollback.result }}"
          echo ""
          
          if [ "${{ needs.rollback.result }}" = "success" ]; then
            echo "üö® ROLLBACK EXECUTADO"
          elif [ "${{ needs.terraform-deploy.result }}" = "success" ]; then
            echo "‚úÖ SISTEMA MANA FOOD DEPLOYADO!"
            echo ""
            echo "üèóÔ∏è ARQUITETURA IMPLEMENTADA:"
            echo "  üóÑÔ∏è Aurora MySQL RDS - Banco central"
            echo "  ‚ö° Lambda .NET 9 - Autentica√ß√£o via RDS"
            echo "  ‚ò∏Ô∏è EKS Kubernetes - App conectada ao RDS"
            echo "  üåê Load Balancer - Interface web"
            echo ""
            echo "üîó CONECTIVIDADE:"
            echo "  Lambda ‚Üî Aurora RDS ‚Üî EKS App"
            echo ""
            echo "üß™ TESTE O SISTEMA:"
            echo "  ‚Ä¢ Acesse via Load Balancer"
            echo "  ‚Ä¢ Use CPFs: 12345678901, 98765432100, etc."
            echo "  ‚Ä¢ Lambda consulta usu√°rios no RDS"
            echo "  ‚Ä¢ App tem acesso aos mesmos dados"
          else
            echo "‚ùå Falha no deployment"
          fi