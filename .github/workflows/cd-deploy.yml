name: Deploy na AWS com Rollback

on:
  workflow_dispatch:
    inputs:
      image:
        description: "Imagem da aplicação para deploy"
        required: true
        type: string
        default: ghcr.io/mana-food-clean-architecture:latest
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write

jobs:
  terraform-deploy:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/terraform/envs/prod
    outputs:
      terraform-success: ${{ steps.apply.outcome }}

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'
          terraform_wrapper: false

      - name: Terraform Format
        run: terraform fmt -recursive

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.AWS_TF_STATE_BUCKET }}" \
            -backend-config="key=mana-food-prod.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}"

      - name: Terraform Validate
        run: terraform validate

      - name: Backup Terraform State
        run: |
          echo "📦 Fazendo backup do estado atual..."
          terraform state pull > terraform-state-backup.json

      - name: Upload State Backup
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state-backup-${{ github.run_id }}
          path: infra/terraform/envs/prod/terraform-state-backup.json
          retention-days: 30

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="bucket_state_name=${{ secrets.AWS_TF_STATE_BUCKET }}" \
            -out=tfplan

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan

      - name: Verify Infrastructure
        id: verify
        run: |
          echo "🔍 Verificando infraestrutura..."
          
          # Verificar EKS
          if aws eks describe-cluster --name mana-food-eks --region ${{ secrets.AWS_REGION }} --query 'cluster.status' --output text | grep -q "ACTIVE"; then
            echo "✅ EKS cluster ativo"
          else
            echo "❌ EKS cluster com problema"
            exit 1
          fi
          
          # Verificar Aurora
          if aws rds describe-db-clusters --db-cluster-identifier mana-food-aurora --region ${{ secrets.AWS_REGION }} --query 'DBClusters[0].Status' --output text | grep -q "available"; then
            echo "✅ Aurora cluster disponível"
          else
            echo "❌ Aurora cluster com problema"
            exit 1
          fi
          
          # Verificar Lambda
          if aws lambda get-function --function-name mana-food-api --region ${{ secrets.AWS_REGION }} --query 'Configuration.State' --output text | grep -q "Active"; then
            echo "✅ Lambda function ativa"
          else
            echo "❌ Lambda function com problema"
            exit 1
          fi

      - name: Get Outputs
        if: steps.apply.outcome == 'success' && steps.verify.outcome == 'success'
        run: terraform output -json > outputs.json

      - name: Upload Outputs
        if: steps.apply.outcome == 'success' && steps.verify.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-${{ github.run_id }}
          path: infra/terraform/envs/prod/outputs.json

  rollback-terraform:
    name: 'Rollback Infrastructure'
    runs-on: ubuntu-latest
    needs: terraform-deploy
    if: failure() && needs.terraform-deploy.outputs.terraform-success == 'failure'
    defaults:
      run:
        working-directory: infra/terraform/envs/prod

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.AWS_TF_STATE_BUCKET }}" \
            -backend-config="key=mana-food-prod.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}"

      - name: Download State Backup
        uses: actions/download-artifact@v4
        with:
          name: terraform-state-backup-${{ github.run_id }}
          path: infra/terraform/envs/prod

      - name: Rollback Infrastructure
        run: |
          echo "🔄 Iniciando rollback da infraestrutura..."
          terraform destroy -target="aws_lambda_function.api" -auto-approve -var="bucket_state_name=${{ secrets.AWS_TF_STATE_BUCKET }}" || true
          terraform destroy -target="module.aurora" -auto-approve -var="bucket_state_name=${{ secrets.AWS_TF_STATE_BUCKET }}" || true
          terraform destroy -target="module.eks" -auto-approve -var="bucket_state_name=${{ secrets.AWS_TF_STATE_BUCKET }}" || true
          echo "✅ Rollback da infraestrutura concluído"

  deploy-app:
    name: 'Deploy App'
    runs-on: ubuntu-latest
    needs: terraform-deploy
    if: github.ref == 'refs/heads/main' && needs.terraform-deploy.outputs.terraform-success == 'success'
    outputs:
      deployment-success: ${{ steps.deploy.outcome }}
      previous-image: ${{ steps.backup.outputs.previous-image }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Wait for cluster to be ready
        run: |
          echo "⏳ Aguardando cluster EKS ficar totalmente pronto..."
          
          # Aguardar até o cluster estar ACTIVE
          timeout 600 bash -c '
            while true; do
              STATUS=$(aws eks describe-cluster --name mana-food-eks --region sa-east-1 --query "cluster.status" --output text)
              echo "Status do cluster: $STATUS"
              if [ "$STATUS" = "ACTIVE" ]; then
                echo "✅ Cluster EKS está ACTIVE"
                break
              fi
              sleep 30
            done
          '
          
          # Configurar kubeconfig
          aws eks update-kubeconfig --region sa-east-1 --name mana-food-eks
          
          # Aguardar API server responder
          timeout 300 bash -c '
            while ! kubectl cluster-info >/dev/null 2>&1; do
              echo "Aguardando API server..."
              sleep 15
            done
          '
          
          # Aguardar nodes ficarem prontos
          timeout 300 bash -c '
            while [ $(kubectl get nodes --no-headers 2>/dev/null | grep -c Ready) -lt 1 ]; do
              echo "Aguardando worker nodes..."
              kubectl get nodes 2>/dev/null || true
              sleep 15
            done
          '
          
          echo "✅ Cluster EKS totalmente pronto!"
          kubectl get nodes

      - name: Check cluster resources
        run: |
          echo "🔍 Verificando recursos do cluster..."
          kubectl get nodes -o wide
          kubectl get pods --all-namespaces
          kubectl top nodes || echo "Metrics server não disponível"

      - name: Backup current deployment
        id: backup
        continue-on-error: true
        run: |
          if kubectl get deployment mana-food-app >/dev/null 2>&1; then
            CURRENT_IMAGE=$(kubectl get deployment mana-food-app -o jsonpath='{.spec.template.spec.containers[0].image}')
            echo "previous-image=$CURRENT_IMAGE" >> $GITHUB_OUTPUT
            echo "📦 Backup da imagem atual: $CURRENT_IMAGE"
            kubectl get deployment mana-food-app -o yaml > deployment-backup.yaml
          else
            echo "⚠️ Deployment não existe - será criado"
          fi

      - name: Upload deployment backup
        if: steps.backup.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-backup-${{ github.run_id }}
          path: deployment-backup.yaml
          retention-days: 30

      - name: Deploy app with diagnostics
        id: deploy
        run: |
          IMAGE="${{ github.event.inputs.image || 'ghcr.io/mana-food-clean-architecture:latest' }}"
          
          echo "🔍 Verificando se a imagem existe..."
          # Tentar verificar se a imagem existe (pode falhar se for privada)
          if ! curl -s -f -L "https://ghcr.io/v2/mana-food/mana-food-clean-architecture/manifests/latest" >/dev/null 2>&1; then
            echo "⚠️ Imagem pode não existir ou ser privada: $IMAGE"
            echo "Usando nginx como fallback para teste da infraestrutura..."
            IMAGE="nginx:latest"
          fi
          
          if kubectl get deployment mana-food-app >/dev/null 2>&1; then
            echo "🔄 Atualizando deployment existente..."
            kubectl set image deployment/mana-food-app app="$IMAGE"
          else
            echo "🚀 Criando novo deployment..."
            kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: mana-food-app
            namespace: default
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: mana-food-app
            template:
              metadata:
                labels:
                  app: mana-food-app
              spec:
                containers:
                - name: app
                  image: $IMAGE
                  ports:
                  - containerPort: 8080
                  resources:
                    requests:
                      cpu: "100m"
                      memory: "128Mi"
                    limits:
                      cpu: "500m"
                      memory: "512Mi"
                  env:
                  - name: ASPNETCORE_ENVIRONMENT
                    value: "Production"
                  - name: ASPNETCORE_URLS
                    value: "http://+:8080"
                  # Health checks básicos (só para nginx de teste)
                  livenessProbe:
                    httpGet:
                      path: /
                      port: 8080
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    failureThreshold: 3
                  readinessProbe:
                    httpGet:
                      path: /
                      port: 8080
                    initialDelaySeconds: 5
                    periodSeconds: 5
                    failureThreshold: 3
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: mana-food-service
            namespace: default
          spec:
            selector:
              app: mana-food-app
            ports:
            - port: 80
              targetPort: 8080
            type: LoadBalancer
          EOF
          fi

      - name: Wait for rollout with monitoring
        run: |
          echo "⏳ Aguardando deployment com monitoramento..."
          
          # Aguardar por 2 minutos primeiro
          if kubectl rollout status deployment/mana-food-app --timeout=120s; then
            echo "✅ Deployment concluído com sucesso!"
          else
            echo "⚠️ Deployment demorou mais que 2 minutos, verificando status..."
            
            echo "📊 Status do deployment:"
            kubectl get deployment mana-food-app -o wide
            kubectl get replicaset -l app=mana-food-app
            kubectl get pods -l app=mana-food-app -o wide
            
            echo "📋 Logs dos pods:"
            kubectl get pods -l app=mana-food-app -o name | while read pod; do
              echo "=== Logs do $pod ==="
              kubectl logs $pod --tail=20 || echo "Não foi possível obter logs"
              echo "=== Describe do $pod ==="
              kubectl describe $pod | tail -20
            done
            
            echo "📋 Events recentes:"
            kubectl get events --sort-by='.lastTimestamp' | tail -10
            
            # Tentar aguardar mais 2 minutos
            if kubectl rollout status deployment/mana-food-app --timeout=120s; then
              echo "✅ Deployment concluído após aguardar mais tempo!"
            else
              echo "❌ Deployment falhou após 4 minutos"
              exit 1
            fi
          fi

      - name: Verify deployment
        run: |
          echo "🔍 Verificando deployment final..."
          READY=$(kubectl get deployment mana-food-app -o jsonpath='{.status.readyReplicas}')
          DESIRED=$(kubectl get deployment mana-food-app -o jsonpath='{.spec.replicas}')
          
          if [ "$READY" = "$DESIRED" ]; then
            echo "✅ Deployment OK ($READY/$DESIRED pods prontos)"
          else
            echo "❌ Deployment com problema ($READY/$DESIRED pods prontos)"
            kubectl get pods -l app=mana-food-app
            exit 1
          fi

      - name: Show deployment info
        if: success()
        run: |
          echo "✅ Deploy concluído com sucesso!"
          kubectl get pods -l app=mana-food-app -o wide
          kubectl get svc mana-food-service
          kubectl get events --sort-by='.lastTimestamp' | tail -5

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "🧹 Limpando recursos do deployment falhado..."
          kubectl delete deployment mana-food-app || true
          kubectl delete service mana-food-service || true

  rollback-app:
    name: 'Rollback Application'
    runs-on: ubuntu-latest
    needs: deploy-app
    if: failure() && needs.deploy-app.outputs.deployment-success == 'failure' && needs.deploy-app.outputs.previous-image != ''

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name mana-food-eks

      - name: Rollback to previous version
        run: |
          PREVIOUS_IMAGE="${{ needs.deploy-app.outputs.previous-image }}"
          echo "🔄 Fazendo rollback para: $PREVIOUS_IMAGE"
          kubectl set image deployment/mana-food-app app="$PREVIOUS_IMAGE"
          kubectl rollout status deployment/mana-food-app --timeout=300s
          echo "✅ Rollback concluído!"

  notify-status:
    name: 'Notify Status'
    runs-on: ubuntu-latest
    needs: [terraform-deploy, deploy-app, rollback-terraform, rollback-app]
    if: always()

    steps:
      - name: Determine status
        run: |
          TERRAFORM_STATUS="${{ needs.terraform-deploy.result }}"
          APP_STATUS="${{ needs.deploy-app.result }}"
          ROLLBACK_INFRA="${{ needs.rollback-terraform.result }}"
          ROLLBACK_APP="${{ needs.rollback-app.result }}"
          
          echo "📊 Status Final:"
          echo "Terraform: $TERRAFORM_STATUS"
          echo "App Deploy: $APP_STATUS"
          echo "Rollback Infra: $ROLLBACK_INFRA"
          echo "Rollback App: $ROLLBACK_APP"
          
          if [ "$TERRAFORM_STATUS" = "success" ] && [ "$APP_STATUS" = "success" ]; then
            echo "✅ Deploy realizado com sucesso!"
          elif [ "$ROLLBACK_INFRA" = "success" ] || [ "$ROLLBACK_APP" = "success" ]; then
            echo "🔄 Rollback realizado - sistema restaurado!"
          else
            echo "❌ Deploy falhou - verifique os logs"
          fi