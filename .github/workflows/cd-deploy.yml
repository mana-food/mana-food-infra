name: Deploy na AWS

on:
  workflow_dispatch:
    inputs:
      image:
        description: "Imagem da aplica√ß√£o para deploy"
        required: true
        type: string
        default: ghcr.io/mana-food-clean-architecture:latest
      deployment:
        description: "Deployment Kubernetes a atualizar"
        required: true
        default: "mana-food-app"
      container:
        description: "Container dentro do deployment a atualizar"
        required: true
        default: "app-container"
      namespace:
        description: "Namespace Kubernetes"
        required: true
        default: "default"
  push:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:

  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/terraform/envs/prod

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'

      - name: Terraform Format Check
        id: fmt
        run: |
          echo "üîç Verificando formata√ß√£o dos arquivos Terraform..."
          if ! terraform fmt -check -recursive; then
            echo "‚ö†Ô∏è Formata√ß√£o incorreta detectada. Corrigindo automaticamente..."
            terraform fmt -recursive
            echo "‚úÖ Formata√ß√£o corrigida automaticamente"
          else
            echo "‚úÖ Formata√ß√£o est√° correta"
          fi
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.AWS_TF_STATE_BUCKET }}" \
            -backend-config="key=${{ github.repository }}-${{ github.ref_name }}.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

  terraform-plan-prod:
    name: 'Plan Production'
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main'
    environment: production
    defaults:
      run:
        working-directory: infra/terraform/envs/prod

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.AWS_TF_STATE_BUCKET }}" \
            -backend-config="key=${{ github.repository }}-prod.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}"

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var="bucket_state_name=${{ secrets.AWS_TF_STATE_BUCKET }}" \
            -out=tfplan-prod \
            -no-color

      - name: Salvar plano
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-prod
          path: infra/terraform/envs/prod/tfplan-prod
          retention-days: 30

  terraform-apply-prod:
    name: 'Apply Production'
    runs-on: ubuntu-latest
    needs: terraform-plan-prod
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://example.com
    defaults:
      run:
        working-directory: infra/terraform/envs/prod

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.AWS_TF_STATE_BUCKET }}" \
            -backend-config="key=${{ github.repository }}-prod.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}"

      - name: Download plano
        uses: actions/download-artifact@v4
        with:
          name: tfplan-prod
          path: infra/terraform/envs/prod

      # CORRIGIDO: Import recursos existentes ANTES da limpeza
      - name: Import recursos existentes
        continue-on-error: true
        run: |
          echo "üîç Verificando recursos existentes..."
          
          # Verificar se IAM User j√° est√° no state
          if ! terraform state show aws_iam_user.manafood_terraform >/dev/null 2>&1; then
            echo "üì• Importando IAM User..."
            terraform import \
              -var="bucket_state_name=${{ secrets.AWS_TF_STATE_BUCKET }}" \
              aws_iam_user.manafood_terraform manafood-terraform || true
          else
            echo "‚úÖ IAM User j√° est√° no state"
          fi
          
          # Verificar KMS Alias
          if ! terraform state show 'module.eks.module.kms.aws_kms_alias.this["cluster"]' >/dev/null 2>&1; then
            echo "üì• Importando KMS Alias..."
            terraform import \
              -var="bucket_state_name=${{ secrets.AWS_TF_STATE_BUCKET }}" \
              'module.eks.module.kms.aws_kms_alias.this["cluster"]' alias/eks/mana-food-eks || true
          else
            echo "‚úÖ KMS Alias j√° est√° no state"
          fi
          
          # Verificar CloudWatch Log Group
          if ! terraform state show 'module.eks.aws_cloudwatch_log_group.this[0]' >/dev/null 2>&1; then
            echo "üì• Importando CloudWatch Log Group..."
            terraform import \
              -var="bucket_state_name=${{ secrets.AWS_TF_STATE_BUCKET }}" \
              'module.eks.aws_cloudwatch_log_group.this[0]' /aws/eks/mana-food-eks/cluster || true
          else
            echo "‚úÖ CloudWatch Log Group j√° est√° no state"
          fi

      # CORRIGIDO: Limpeza mais espec√≠fica
      - name: Limpar recursos √≥rf√£os do state
        continue-on-error: true
        run: |
          echo "üßπ Limpando recursos √≥rf√£os..."
          
          # Listar todos os recursos no state
          terraform state list > current_state.txt
          
          # Remover apenas recursos espec√≠ficos que causam problemas
          resources_to_remove=(
            "aws_security_group_rule.lambda_to_aurora_access"
            "aws_security_group_rule.lambda_egress_to_aurora"
          )
          
          for resource in "${resources_to_remove[@]}"; do
            if grep -q "^$resource$" current_state.txt; then
              echo "üóëÔ∏è Removendo: $resource"
              terraform state rm "$resource" || true
            fi
          done
          
          # Remover recursos deposed (√≥rf√£os) um por vez
          terraform state list | grep "deposed" | head -10 | while read resource; do
            if [ -n "$resource" ]; then
              echo "üóëÔ∏è Removendo recurso √≥rf√£o: $resource"
              terraform state rm "$resource" || true
            fi
          done

      # CORRIGIDO: Recriar plan com replace espec√≠fico
      - name: Recriar Terraform Plan (p√≥s-import)
        run: |
          echo "üìã Criando plano de execu√ß√£o..."
          terraform plan \
            -var="bucket_state_name=${{ secrets.AWS_TF_STATE_BUCKET }}" \
            -out=tfplan-prod \
            -no-color \
            -target=aws_db_subnet_group.aurora \
            -target=module.aurora.aws_rds_cluster.this[0] \
            -replace="module.aurora.aws_rds_cluster.this[0]"

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan-prod

      - name: Terraform Output
        id: output
        run: terraform output -json > outputs.json

      - name: Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-prod
          path: infra/terraform/envs/prod/outputs.json
          retention-days: 90

      - name: Notificar sucesso
        if: success()
        run: |
          echo "‚úÖ Deploy em produ√ß√£o realizado com sucesso!"
          echo "Commit: ${{ github.sha }}"
          echo "Autor: ${{ github.actor }}"

  deploy-app:
    name: 'Deploy Aplica√ß√£o no EKS'
    runs-on: ubuntu-latest
    needs: terraform-apply-prod
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: production
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Instalar kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Obter kubeconfig do EKS
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name mana-food-eks

      - name: Verificar se deployment existe
        id: check_deployment
        continue-on-error: true
        run: |
          kubectl get deployment ${{ github.event.inputs.deployment || 'mana-food-app' }} \
            -n ${{ github.event.inputs.namespace || 'default' }}

      - name: Atualizar imagem do deployment
        if: steps.check_deployment.outcome == 'success'
        run: |
          kubectl set image deployment/${{ github.event.inputs.deployment || 'mana-food-app' }} \
            ${{ github.event.inputs.container || 'app-container' }}=${{ github.event.inputs.image || 'ghcr.io/mana-food-clean-architecture:latest' }} \
            -n ${{ github.event.inputs.namespace || 'default' }}

      - name: Verificar rollout
        if: steps.check_deployment.outcome == 'success'
        run: |
          kubectl rollout status deployment/${{ github.event.inputs.deployment || 'mana-food-app' }} \
            -n ${{ github.event.inputs.namespace || 'default' }} \
            --timeout=300s

      - name: Mostrar status dos pods
        if: always()
        run: |
          kubectl get pods -n ${{ github.event.inputs.namespace || 'default' }} -l app=mana-food-app

      - name: Notificar deploy
        if: success()
        run: |
          echo "üöÄ Deploy da aplica√ß√£o realizado com sucesso no cluster EKS!"
          echo "Imagem: ${{ github.event.inputs.image || 'ghcr.io/mana-food-clean-architecture:latest' }}"
          echo "Namespace: ${{ github.event.inputs.namespace || 'default' }}"
          echo "Deployment: ${{ github.event.inputs.deployment || 'mana-food-app' }}"