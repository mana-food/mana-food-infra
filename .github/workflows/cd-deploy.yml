name: Deploy na AWS

on:
  workflow_dispatch:   # Gatilho manual ou via outro repositório
    inputs:
      image:
        description: "Imagem da aplicação para deploy"
        required: true
        type: string
        default: ghcr.io/mana-food-clean-architecture:latest
      deployment:
        description: "Deployment Kubernetes a atualizar"
        required: true
        default: "mana-food"
      container:
        description: "Container dentro do deployment a atualizar"
        required: true
        default: "mana-food"
      namespace:
        description: "Namespace Kubernetes"
        required: true
        default: "default"

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_SECRET_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Format Terraform
        run: terraform fmt -check -recursive

      - name: Validate Terraform
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'   # só aplica na branch main
        run: terraform apply -auto-approve tfplan

  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout Infra Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_SECRET_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_SECRET_REGION }} --name meu-cluster-eks

      - name: Deploy no Kubernetes
        run: |
          echo "Deploying image ${{ github.event.inputs.image }} to deployment ${{ github.event.inputs.deployment }} in namespace ${{ github.event.inputs.namespace }}"
          kubectl get deployment ${{ github.event.inputs.deployment }} -n ${{ github.event.inputs.namespace }} || exit 1
          kubectl set image deployment/${{ github.event.inputs.deployment }} \
            ${{ github.event.inputs.container }}=${{ github.event.inputs.image }} \
            -n ${{ github.event.inputs.namespace }} --record
          kubectl rollout status deployment/${{ github.event.inputs.deployment }} \
            -n ${{ github.event.inputs.namespace }} --timeout=120s || \
            kubectl rollout undo deployment/${{ github.event.inputs.deployment }} \
            -n ${{ github.event.inputs.namespace }}
