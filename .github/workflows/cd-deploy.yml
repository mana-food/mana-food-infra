name: Deploy Mana Food - Completo

on:
  workflow_dispatch:
    inputs:
      deploy_lambda:
        description: "Deploy Lambda Function"
        type: boolean
        default: true
      deploy_app:
        description: "Deploy EKS Application"
        type: boolean
        default: true
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-lambda:
    name: 'Build Lambda'
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_lambda != 'false'
    outputs:
      lambda-success: ${{ steps.build.outcome }}

    steps:
      - name: Checkout Lambda Repository
        uses: actions/checkout@v4
        with:
          repository: mana-food/mana-food-lambda
          token: ${{ secrets.GITHUB_TOKEN }}
          path: lambda-code

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Restore dependencies
        run: |
          cd lambda-code
          dotnet restore

      - name: Build Lambda
        id: build
        run: |
          cd lambda-code
          dotnet build --configuration Release --no-restore
          dotnet publish --configuration Release --runtime linux-x64 --self-contained false -o publish/

      - name: Create Lambda ZIP
        run: |
          cd lambda-code/publish
          zip -r ../../lambda-deployment.zip .
          ls -la ../../lambda-deployment.zip

      - name: Upload Lambda artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-deployment-${{ github.run_id }}
          path: lambda-deployment.zip
          retention-days: 30

  build-app-image:
    name: 'Build App Docker Image'
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_app != 'false'
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
      build-success: ${{ steps.build.outcome }}

    steps:
      - name: Checkout App Repository
        uses: actions/checkout@v4
        with:
          repository: mana-food/mana-food-clean-architecture
          token: ${{ secrets.GITHUB_TOKEN }}
          path: app-code

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build
        run: |
          cd app-code
          
          # Criar tag baseada no commit
          IMAGE_TAG="ghcr.io/mana-food/mana-food-clean-architecture:${GITHUB_SHA:0:8}"
          IMAGE_LATEST="ghcr.io/mana-food/mana-food-clean-architecture:latest"
          
          echo "üî® Building Docker image..."
          docker build -t "$IMAGE_TAG" -t "$IMAGE_LATEST" .
          
          echo "üì§ Pushing Docker image..."
          docker push "$IMAGE_TAG"
          docker push "$IMAGE_LATEST"
          
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "‚úÖ Image built and pushed: $IMAGE_TAG"

  terraform-deploy:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest
    needs: [build-lambda]
    defaults:
      run:
        working-directory: infra/terraform/envs/prod
    outputs:
      terraform-success: ${{ steps.apply.outcome }}
      aurora-endpoint: ${{ steps.outputs.outputs.aurora-endpoint }}

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'
          terraform_wrapper: false

      - name: Terraform Format
        run: terraform fmt -recursive

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.AWS_TF_STATE_BUCKET }}" \
            -backend-config="key=mana-food-prod.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}"

      - name: Terraform Validate
        run: terraform validate

      - name: Backup Terraform State
        run: |
          echo "üì¶ Fazendo backup do estado atual..."
          terraform state pull > terraform-state-backup.json || echo "Novo deployment - sem estado anterior"

      - name: Upload State Backup
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state-backup-${{ github.run_id }}
          path: infra/terraform/envs/prod/terraform-state-backup.json
          retention-days: 30

      - name: Download Lambda ZIP
        if: needs.build-lambda.outputs.lambda-success == 'success'
        uses: actions/download-artifact@v4
        with:
          name: lambda-deployment-${{ github.run_id }}
          path: infra/terraform/envs/prod

      - name: Verify Lambda ZIP
        if: needs.build-lambda.outputs.lambda-success == 'success'
        run: |
          if [ -f lambda-deployment.zip ]; then
            echo "‚úÖ Lambda ZIP encontrado"
            ls -la lambda-deployment.zip
          else
            echo "‚ùå Lambda ZIP n√£o encontrado - usando dummy"
            echo "dummy content" > dummy.txt
            zip lambda-deployment.zip dummy.txt
          fi

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="bucket_state_name=${{ secrets.AWS_TF_STATE_BUCKET }}" \
            -out=tfplan

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: outputs
        if: steps.apply.outcome == 'success'
        run: |
          terraform output -json > outputs.json
          cat outputs.json
          
          # Extrair outputs espec√≠ficos
          EKS_CLUSTER=$(terraform output -raw eks_cluster_name)
          AURORA_ENDPOINT=$(terraform output -raw aurora_endpoint)
          LAMBDA_NAME=$(terraform output -raw lambda_function_name)
          
          echo "eks-cluster=$EKS_CLUSTER" >> $GITHUB_OUTPUT
          echo "aurora-endpoint=$AURORA_ENDPOINT" >> $GITHUB_OUTPUT
          echo "lambda-name=$LAMBDA_NAME" >> $GITHUB_OUTPUT

      - name: Verify Infrastructure
        id: verify
        run: |
          echo "üîç Verificando infraestrutura..."
          
          # Verificar EKS
          if aws eks describe-cluster --name mana-food-eks --region ${{ secrets.AWS_REGION }} --query 'cluster.status' --output text | grep -q "ACTIVE"; then
            echo "‚úÖ EKS cluster ativo"
          else
            echo "‚ùå EKS cluster com problema"
            exit 1
          fi
          
          # Verificar Aurora
          if aws rds describe-db-clusters --db-cluster-identifier mana-food-aurora --region ${{ secrets.AWS_REGION }} --query 'DBClusters[0].Status' --output text | grep -q "available"; then
            echo "‚úÖ Aurora cluster dispon√≠vel"
          else
            echo "‚ùå Aurora cluster com problema"
            exit 1
          fi
          
          # Verificar Lambda
          if aws lambda get-function --function-name mana-food-api --region ${{ secrets.AWS_REGION }} --query 'Configuration.State' --output text | grep -q "Active"; then
            echo "‚úÖ Lambda function ativa"
          else
            echo "‚ùå Lambda function com problema"
            exit 1
          fi

      - name: Upload Outputs
        if: steps.apply.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-${{ github.run_id }}
          path: infra/terraform/envs/prod/outputs.json

  deploy-app:
    name: 'Deploy App to EKS'
    runs-on: ubuntu-latest
    needs: [terraform-deploy, build-app-image]
    if: github.ref == 'refs/heads/main' && needs.terraform-deploy.outputs.terraform-success == 'success' && needs.build-app-image.outputs.build-success == 'success'
    outputs:
      deployment-success: ${{ steps.deploy.outcome }}
      previous-image: ${{ steps.backup.outputs.previous-image }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Wait for EKS cluster
        run: |
          echo "‚è≥ Aguardando cluster EKS ficar totalmente pronto..."
          
          # Aguardar cluster estar ACTIVE
          timeout 600 bash -c '
            while true; do
              STATUS=$(aws eks describe-cluster --name mana-food-eks --region sa-east-1 --query "cluster.status" --output text)
              echo "Status do cluster: $STATUS"
              if [ "$STATUS" = "ACTIVE" ]; then
                echo "‚úÖ Cluster EKS est√° ACTIVE"
                break
              fi
              sleep 30
            done
          '
          
          # Configurar kubeconfig
          aws eks update-kubeconfig --region sa-east-1 --name mana-food-eks
          
          # Aguardar API server
          timeout 300 bash -c '
            while ! kubectl cluster-info >/dev/null 2>&1; do
              echo "Aguardando API server..."
              sleep 15
            done
          '
          
          # Aguardar nodes
          timeout 600 bash -c '
            while [ $(kubectl get nodes --no-headers 2>/dev/null | grep -c Ready) -lt 1 ]; do
              echo "Aguardando worker nodes..."
              kubectl get nodes 2>/dev/null || echo "Nodes ainda n√£o dispon√≠veis"
              sleep 30
            done
          '
          
          echo "‚úÖ Cluster EKS totalmente pronto!"
          kubectl get nodes -o wide

      - name: Get Aurora credentials
        id: aurora-creds
        run: |
          # Obter endpoint do Aurora
          AURORA_ENDPOINT="${{ needs.terraform-deploy.outputs.aurora-endpoint }}"
          echo "aurora-endpoint=$AURORA_ENDPOINT" >> $GITHUB_OUTPUT
          
          # Tentar obter senha do Secrets Manager
          SECRET_ARN=$(aws rds describe-db-clusters --db-cluster-identifier mana-food-aurora --region sa-east-1 --query 'DBClusters[0].MasterUserSecret.SecretArn' --output text)
          if [ "$SECRET_ARN" != "None" ] && [ "$SECRET_ARN" != "null" ]; then
            echo "üîê Obtendo senha do Secrets Manager..."
            DB_PASSWORD=$(aws secretsmanager get-secret-value --secret-id "$SECRET_ARN" --region sa-east-1 --query 'SecretString' --output text | jq -r '.password')
            echo "aurora-password=$DB_PASSWORD" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Usando senha padr√£o - configure no Secrets Manager para produ√ß√£o"
            echo "aurora-password=${{ secrets.DB_PASSWORD || 'defaultpassword123' }}" >> $GITHUB_OUTPUT
          fi

      - name: Backup current deployment
        id: backup
        continue-on-error: true
        run: |
          if kubectl get deployment mana-food-app >/dev/null 2>&1; then
            CURRENT_IMAGE=$(kubectl get deployment mana-food-app -o jsonpath='{.spec.template.spec.containers[0].image}')
            echo "previous-image=$CURRENT_IMAGE" >> $GITHUB_OUTPUT
            echo "üì¶ Backup da imagem atual: $CURRENT_IMAGE"
            kubectl get deployment mana-food-app -o yaml > deployment-backup.yaml
          else
            echo "‚ö†Ô∏è Deployment n√£o existe - ser√° criado"
          fi

      - name: Upload deployment backup
        if: steps.backup.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-backup-${{ github.run_id }}
          path: deployment-backup.yaml
          retention-days: 30

      - name: Deploy application
        id: deploy
        run: |
          IMAGE="${{ needs.build-app-image.outputs.image-tag }}"
          AURORA_ENDPOINT="${{ steps.aurora-creds.outputs.aurora-endpoint }}"
          AURORA_PASSWORD="${{ steps.aurora-creds.outputs.aurora-password }}"
          
          echo "üöÄ Deployando aplica√ß√£o com imagem: $IMAGE"
          echo "üìä Aurora endpoint: $AURORA_ENDPOINT"
          
          # Criar ConfigMap com configura√ß√µes
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: mana-food-config
            namespace: default
          data:
            ASPNETCORE_ENVIRONMENT: "Production"
            ASPNETCORE_URLS: "http://+:8080"
            Logging__LogLevel__Default: "Information"
            Logging__LogLevel__Microsoft.AspNetCore: "Warning"
          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: mana-food-secrets
            namespace: default
          type: Opaque
          stringData:
            ConnectionStrings__DefaultConnection: "Server=$AURORA_ENDPOINT;Port=3306;Database=appdb;Uid=admin;Pwd=$AURORA_PASSWORD;SslMode=Required;"
          EOF
          
          # Deploy da aplica√ß√£o
          if kubectl get deployment mana-food-app >/dev/null 2>&1; then
            echo "üîÑ Atualizando deployment existente..."
            kubectl set image deployment/mana-food-app app="$IMAGE"
          else
            echo "üöÄ Criando novo deployment..."
            kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: mana-food-app
            namespace: default
            labels:
              app: mana-food-app
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: mana-food-app
            template:
              metadata:
                labels:
                  app: mana-food-app
              spec:
                containers:
                - name: app
                  image: $IMAGE
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 8080
                    name: http
                  resources:
                    requests:
                      cpu: "250m"
                      memory: "512Mi"
                    limits:
                      cpu: "1000m"
                      memory: "1Gi"
                  envFrom:
                  - configMapRef:
                      name: mana-food-config
                  - secretRef:
                      name: mana-food-secrets
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 8080
                    initialDelaySeconds: 60
                    periodSeconds: 30
                    timeoutSeconds: 10
                    failureThreshold: 3
                  readinessProbe:
                    httpGet:
                      path: /health/ready
                      port: 8080
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: mana-food-service
            namespace: default
            labels:
              app: mana-food-app
          spec:
            selector:
              app: mana-food-app
            ports:
            - port: 80
              targetPort: 8080
              protocol: TCP
              name: http
            type: LoadBalancer
          EOF
          fi

      - name: Wait for deployment rollout
        run: |
          echo "‚è≥ Aguardando rollout do deployment..."
          
          # Aguardar rollout por at√© 10 minutos
          if kubectl rollout status deployment/mana-food-app --timeout=600s; then
            echo "‚úÖ Deployment conclu√≠do com sucesso!"
          else
            echo "‚ùå Deployment falhou ou timeout"
            
            echo "üìä Status do deployment:"
            kubectl get deployment mana-food-app -o wide
            kubectl get pods -l app=mana-food-app -o wide
            
            echo "üìã Logs dos pods:"
            kubectl get pods -l app=mana-food-app -o name | head -3 | while read pod; do
              echo "=== Logs do $pod ==="
              kubectl logs $pod --tail=50 || echo "N√£o foi poss√≠vel obter logs"
            done
            
            echo "üìã Events:"
            kubectl get events --sort-by='.lastTimestamp' | tail -10
            
            exit 1
          fi

      - name: Verify deployment health
        run: |
          echo "üîç Verificando sa√∫de do deployment..."
          
          READY=$(kubectl get deployment mana-food-app -o jsonpath='{.status.readyReplicas}')
          DESIRED=$(kubectl get deployment mana-food-app -o jsonpath='{.spec.replicas}')
          
          if [ "$READY" = "$DESIRED" ] && [ "$READY" -gt "0" ]; then
            echo "‚úÖ Deployment saud√°vel ($READY/$DESIRED pods prontos)"
          else
            echo "‚ùå Deployment com problema ($READY/$DESIRED pods prontos)"
            kubectl describe deployment mana-food-app
            exit 1
          fi

      - name: Get service information
        run: |
          echo "üåê Informa√ß√µes do servi√ßo:"
          kubectl get svc mana-food-service
          
          echo "üìã Pods em execu√ß√£o:"
          kubectl get pods -l app=mana-food-app -o wide
          
          echo "üìä Recursos utilizados:"
          kubectl top pods -l app=mana-food-app || echo "Metrics server n√£o dispon√≠vel"

  test-endpoints:
    name: 'Test Endpoints'
    runs-on: ubuntu-latest
    needs: [terraform-deploy, deploy-app]
    if: needs.deploy-app.outputs.deployment-success == 'success'

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Test Lambda function
        run: |
          echo "üß™ Testando Lambda function..."
          
          # Testar invoca√ß√£o da Lambda
          LAMBDA_RESPONSE=$(aws lambda invoke --function-name mana-food-api --region sa-east-1 --payload '{}' response.json)
          echo "Lambda response: $LAMBDA_RESPONSE"
          
          if [ -f response.json ]; then
            echo "Lambda output:"
            cat response.json
          fi

      - name: Test EKS application
        run: |
          echo "üß™ Testando aplica√ß√£o EKS..."
          
          # Configurar kubectl
          aws eks update-kubeconfig --region sa-east-1 --name mana-food-eks
          
          # Obter endpoint do Load Balancer
          timeout 300 bash -c '
            while true; do
              LB_HOSTNAME=$(kubectl get svc mana-food-service -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
              if [ -n "$LB_HOSTNAME" ] && [ "$LB_HOSTNAME" != "null" ]; then
                echo "Load Balancer endpoint: $LB_HOSTNAME"
                break
              fi
              echo "Aguardando Load Balancer..."
              sleep 30
            done
          ' || echo "Timeout aguardando Load Balancer"
          
          # Testar conectividade interna
          kubectl run test-pod --image=curlimages/curl:latest --restart=Never --rm -i --tty -- curl -s http://mana-food-service/health || echo "Health check interno falhou"

  rollback-terraform:
    name: 'Rollback Infrastructure'
    runs-on: ubuntu-latest
    needs: terraform-deploy
    if: failure() && needs.terraform-deploy.outputs.terraform-success == 'failure'
    defaults:
      run:
        working-directory: infra/terraform/envs/prod

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.AWS_TF_STATE_BUCKET }}" \
            -backend-config="key=mana-food-prod.tfstate" \
            -backend-config="region=sa-east-1"

      - name: Rollback Infrastructure
        run: |
          echo "üîÑ Iniciando rollback da infraestrutura..."
          terraform destroy -target="aws_lambda_function.api" -auto-approve -var="bucket_state_name=${{ secrets.AWS_TF_STATE_BUCKET }}" || true
          terraform destroy -target="module.aurora" -auto-approve -var="bucket_state_name=${{ secrets.AWS_TF_STATE_BUCKET }}" || true
          terraform destroy -target="module.eks" -auto-approve -var="bucket_state_name=${{ secrets.AWS_TF_STATE_BUCKET }}" || true
          echo "‚úÖ Rollback da infraestrutura conclu√≠do"

  rollback-app:
    name: 'Rollback Application'
    runs-on: ubuntu-latest
    needs: deploy-app
    if: failure() && needs.deploy-app.outputs.deployment-success == 'failure' && needs.deploy-app.outputs.previous-image != ''

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name mana-food-eks

      - name: Rollback to previous version
        run: |
          PREVIOUS_IMAGE="${{ needs.deploy-app.outputs.previous-image }}"
          echo "üîÑ Fazendo rollback para: $PREVIOUS_IMAGE"
          kubectl set image deployment/mana-food-app app="$PREVIOUS_IMAGE"
          kubectl rollout status deployment/mana-food-app --timeout=300s
          echo "‚úÖ Rollback conclu√≠do!"

  notify-status:
    name: 'Notify Status'
    runs-on: ubuntu-latest
    needs: [terraform-deploy, deploy-app, test-endpoints, rollback-terraform, rollback-app]
    if: always()

    steps:
      - name: Determine final status
        run: |
          TERRAFORM_STATUS="${{ needs.terraform-deploy.result }}"
          APP_STATUS="${{ needs.deploy-app.result }}"
          TEST_STATUS="${{ needs.test-endpoints.result }}"
          ROLLBACK_INFRA="${{ needs.rollback-terraform.result }}"
          ROLLBACK_APP="${{ needs.rollback-app.result }}"
          
          echo "üìä Status Final do Deployment:"
          echo "üèóÔ∏è  Terraform: $TERRAFORM_STATUS"
          echo "üöÄ App Deploy: $APP_STATUS"
          echo "üß™ Tests: $TEST_STATUS"
          echo "üîÑ Rollback Infra: $ROLLBACK_INFRA"
          echo "üîÑ Rollback App: $ROLLBACK_APP"
          echo ""
          
          if [ "$TERRAFORM_STATUS" = "success" ] && [ "$APP_STATUS" = "success" ]; then
            echo "‚úÖ DEPLOY REALIZADO COM SUCESSO!"
            echo "üéâ Todos os servi√ßos est√£o funcionando:"
            echo "   - EKS Cluster: mana-food-eks"
            echo "   - Aurora MySQL: mana-food-aurora"
            echo "   - Lambda API: mana-food-api"
            echo "   - Load Balancer: verificar kubectl get svc"
          elif [ "$ROLLBACK_INFRA" = "success" ] || [ "$ROLLBACK_APP" = "success" ]; then
            echo "üîÑ ROLLBACK REALIZADO COM SUCESSO!"
            echo "üí° Sistema restaurado ao estado anterior"
          else
            echo "‚ùå DEPLOY FALHOU"
            echo "üîç Verifique os logs dos jobs para mais detalhes"
          fi