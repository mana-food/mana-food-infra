name: Deploy na AWS

on:
  workflow_dispatch:
    inputs:
      image:
        description: "Imagem da aplica√ß√£o para deploy"
        required: true
        type: string
        default: ghcr.io/mana-food-clean-architecture:latest
      deployment:
        description: "Deployment Kubernetes a atualizar"
        required: true
        default: "mana-food"
      container:
        description: "Container dentro do deployment a atualizar"
        required: true
        default: "mana-food"
      namespace:
        description: "Namespace Kubernetes"
        required: true
        default: "default"
  push:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:

  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/terraform/envs/prod

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_SECRET_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.AWS_TF_STATE_BUCKET }}" \
            -backend-config="key=${{ github.repository }}-${{ github.ref_name }}.tfstate" \
            -backend-config="region=${{ secrets.AWS_SECRET_REGION }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Comentar resultado no PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            
            <details><summary>Validation Output</summary>
            
            \`\`\`
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: terraform-validate
    defaults:
      run:
        working-directory: infra/terraform/envs/prod

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infra/terraform/envs/prod
          soft_fail: true
          format: sarif
          additional_args: --minimum-severity MEDIUM

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif

  terraform-plan-prod:
    name: 'Plan Production'
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security]
    if: github.ref == 'refs/heads/main'
    environment: production
    defaults:
      run:
        working-directory: infra/terraform/envs/prod

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_SECRET_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.AWS_TF_STATE_BUCKET }}" \
            -backend-config="key=${{ github.repository }}-prod.tfstate" \
            -backend-config="region=${{ secrets.AWS_SECRET_REGION }}"

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var-file="environments/prod.tfvars" \
            -out=tfplan-prod \
            -no-color

      - name: Salvar plano
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-prod
          path: ./terraform/tfplan-prod
          retention-days: 30

  terraform-apply-prod:
    name: 'Apply Production'
    runs-on: ubuntu-latest
    needs: terraform-plan-prod
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://example.com
    defaults:
      run:
        working-directory: infra/terraform/envs/prod

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_SECRET_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.AWS_TF_STATE_BUCKET }}" \
            -backend-config="key=${{ github.repository }}-prod.tfstate" \
            -backend-config="region=${{ secrets.AWS_SECRET_REGION }}"

      - name: Download plano
        uses: actions/download-artifact@v4
        with:
          name: tfplan-prod
          path: infra/terraform/envs/prod

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan-prod

      - name: Terraform Output
        id: output
        run: terraform output -json > outputs.json

      - name: Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-prod
          path: ./terraform/outputs.json
          retention-days: 90

      - name: Notificar sucesso
        if: success()
        run: |
          echo "‚úÖ Deploy em produ√ß√£o realizado com sucesso!"
          echo "Commit: ${{ github.sha }}"
          echo "Autor: ${{ github.actor }}"

  terraform-destroy:
    name: 'Destroy Infrastructure'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment:
      name: production
    defaults:
      run:
        working-directory: infra/terraform/envs/prod

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_SECRET_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.AWS_TF_STATE_BUCKET }}" \
            -backend-config="key=${{ github.repository }}-prod.tfstate" \
            -backend-config="region=${{ secrets.AWS_SECRET_REGION }}"

      - name: Terraform Destroy
        run: |
          terraform destroy \
            -var-file="environments/prod.tfvars" \
            -auto-approve

      - name: Notificar destrui√ß√£o
        if: success()
        run: |
          echo "‚ö†Ô∏è Infraestrutura destru√≠da!"
          echo "Ambiente: production"
          echo "Executado por: ${{ github.actor }}"

  deploy-app:
    name: 'Deploy Aplica√ß√£o no EKS'
    runs-on: ubuntu-latest
    needs: terraform-apply-prod
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: production
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_SECRET_REGION }}

      - name: Instalar kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Obter kubeconfig do EKS
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_SECRET_REGION }} \
            --name ${{ secrets.AWS_EKS_CLUSTER_NAME }}

      - name: Atualizar imagem do deployment
        run: |
          kubectl set image deployment/${{ github.event.inputs.deployment || 'mana-food' }} \
            ${{ github.event.inputs.container || 'mana-food' }}=${{ github.event.inputs.image || 'ghcr.io/mana-food-clean-architecture:latest' }} \
            -n ${{ github.event.inputs.namespace || 'default' }}

      - name: Verificar rollout
        run: |
          kubectl rollout status deployment/${{ github.event.inputs.deployment || 'mana-food' }} \
            -n ${{ github.event.inputs.namespace || 'default' }}

      - name: Notificar deploy
        if: success()
        run: |
          echo "üöÄ Deploy da aplica√ß√£o realizado com sucesso no cluster EKS!"
          echo "Imagem: ${{ github.event.inputs.image || 'ghcr.io/mana-food-clean-architecture:latest' }}"
          echo "Namespace: ${{ github.event.inputs.namespace || 'default' }}"
          echo "Deployment: ${{ github.event.inputs.deployment || 'mana-food' }}"
